###################################################
# 15-323 Spring 14
# Rishabh Alaap Singh (rasingh)
#
# scheduler.srp
#
# Functions that control MIDI. This file maintains
# all the scheduler code and plays all sounds. 
###################################################
require "debug"
debug_stack_print = t
require "sched"

# Channel Plays
PLAY0 = 0
PLAY1 = 0

wait_period = 0.5 # Default wait period
 
# 21 ==> organ
# 13 ==> xylophone
INSTR_SET = [21, 13]
LAST_MIDI_NOTE = [0,0]


### MIDI
def setup_channel(channel_in)
    instruction = chr(0xC0 + channel_in) + chr(INSTR_SET[channel_in]) 
    
    now = int(time_get() * 1000)
    display "-", midi_out, now, instruction
    midi_write(midi_out, now, instruction)
    display channel_in, "set !!"

def play(midi_note, channel_in)
    now = int(time_get() * 1000)

    # Don't do anything if the channels are off
    if channel_in == 0
        if PLAY0 == 0
            return

    if channel_in == 1
        if PLAY1 == 0
            return

    # Change the note only if the last one is not the same note
    if midi_note != LAST_MIDI_NOTE[channel_in]
        # Turn off the last note
        note_off = chr(0x90 + channel_in) + chr(LAST_MIDI_NOTE[channel_in]) + chr(0)
        midi_write(midi_out, now, note_off)
        LAST_MIDI_NOTE[channel_in] = midi_note

        note_on = chr(0x90 + channel_in) + chr(midi_note) + chr(100)
        midi_write(midi_out, now, note_on)

# Toggles the play button for the particular channel
def togglePlay(channel)
    if channel == 0
        if PLAY0 == 0
            PLAY0 = 1
            print "===============PLAYING-0==============="
        else
            PLAY0 = 0

            #turn off the note
            note_off = chr(0x90 + channel) + chr(LAST_MIDI_NOTE[channel]) + chr(0)
            midi_write(midi_out, now, note_off)

            print "===============STOPPED-0==============="
    if channel == 1
        if PLAY1 == 0
            PLAY1 = 1
            print "===============PLAYING-1==============="
        else
            PLAY1 = 0

            # turn off the note
            note_off = chr(0x90 + channel) + chr(LAST_MIDI_NOTE[channel]) + chr(0)
            midi_write(midi_out, now, note_off)
            print "===============STOPPED-1==============="


def timer_callback()
    rtsched.poll(time_get())
    osc_server_poll()

# Sets up the scheduler and initiates MIDI usage
def setup_scheduler()
    sched_init()

    midi_out = midi_create() // create an unopened PortMidi stream
    midi_dev = midi_out_default() // find default device number
    if midi_open_output(midi_out, midi_dev, 100, 10) != 0
        return "Error opening default MIDI device for output"

    rtsched.time_offset = time_get()
    vtsched.set_period(wait_period) 
    wxs_timer_start(2, 'timer_callback')
    
    display "SYSTEM: Scheduler has been set up"
